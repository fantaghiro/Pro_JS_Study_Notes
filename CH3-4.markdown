#第三章 基本概念

##3.1 语法

###3.1.1 区分大小写

###3.1.2 标识符

- 标识符就是指变量、函数、属性的名字或者函数的参数
- 第一个字符必须是一个字母、下划线、美元符号或数字
- 其他字符可以是字符、下划线、美元符号或数字
- 标识符中的字母也可以包含扩展的ASCII或Unicode字母字符，但不推荐使用
- 驼峰写法
- 关键字、保留字、true、false和null不能用作标识符

###3.1.3 注释

``` js
//单行注释
/*
 * 这是一个多行
 * （块级）注释
 */
```

###3.1.4 严格模式

- 如果要在整个脚本中启用严格模式，可以在顶部添加：“use strict";
- 也可以对指定函数使用严格模式

``` js
function doSomething(){
  "use strict";
  //函数体
}
```

###3.1.5 语句

- 推荐给语句结尾都加上分号
- 可以使用C风格的语法把多条语句组合到一个代码块中，用{}括起来
- 条件控制语句（如if），即使只有一条语句，也推荐同花括号括起来

##3.2 关键字和保留字

ECMA-262 描述了一组具有特定用途的关键字

**关键字**

> break do instanceof typeof case else new var catch finally return void continue for switch while debugger* function this with default if throw delete in try 


ECMA-262 还描述了另外一组不能用作标识符的保留字

**保留字**

> abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public


第 5 版把在非严格模式下运行时的保留字缩减为下列这些:

> class enum extends super const export import 


在严格模式下，第 5 版还对以下保留字施加了限制：

> implements package public interface private static let protected yield 

ECMA-262 第 5 版对 eval 和 arguments 还施加了限制。在严格模式下，这两个名字也不能作为标识符或属性名，否则会抛出错误。

##3.3 变量

``` js
var message1; //未经初始化的变量，会保存一个特殊的值——undefined
var message2 = 'hi'; //直接初始化变量
message2 = 100; //有效，但不推荐

function test1(){
    var message3 = 'hi'; //局部变量，用var操作符定义的变量成为定义该变量作用域中的局部变量
}
test1(); //函数调用时，会创建该变量并赋值；之后变量会被立即销毁
alert(message3); //错误！

function test2(){
    message4 = 'hi'; //全局变量，没有var
}
test2();
alert(message4); //'hi'
```

``` js
//一条语句定义多个变量，推荐缩进格式
var message = 'hi',
    found = false,
    age = 29;
```
